1. 序列
用于存放多个值的连续内存空间，包含多个数据项的数据结构，数据项（元素、成员）按一定顺序排列，每个元素都分配一个数字作为索引，通过索引访问成员
序列结构：字符串、列表、元组、字典、集合
列表：可变
元组：不可变
字典和集合不支持索引、切片、加、乘

1.1 索引Indexing
序列中元素的编号，支持负数
元素1     元素2 ... 元素n
 0         1        n-1
 -(n-1)  -(n-2)     -1
 
1.2 切片slicing/'slaɪsɪŋ/ 
s[start:end:step]
 
1.3 加adding
结构相同相加，列表和元组不能加
s1 + s2
 
1.4 乘法
重复多遍，乘以整数
print(['a','b']*3)
['a', 'b', 'a', 'b', 'a', 'b']

1.5 内置函数
list():序列转为列表
str():序列转为字符串
sum():元素和
sorted():元素排序
reversed():反向元素
enumerate():组合为索引序列，用于for循环

1.6 序列封包和序列解包
(1)序列封包sequence packing：多个值赋给一个变量时，自动把多个值封装成一个元组
in [1]:s = 1, 2, 3
       s
Out[1]:(1, 2, 3)  #tuple
(2)序列解包sequence unpacking：可将序列赋给多个变量，各元素依次赋值给各变量，两边个数要相等，也可将剩余的使用列表保存，变量前加*
in [2]:a, b, c = s
       print(a, b, c)
Out[2]:1 2 3
in [2]:a, b, *c = range(5)
       print(a, b, c)
Out[2]:0 1 [2, 3, 4]
in [2]:a, *b, c = range(5)
       print(a, b, c)
Out[2]:0 [1, 2, 3] 4
(3)同时用
in [3]:x, y, z = 1, 2, 3
       print(x, y, z)
Out[3]:1 2 3
(4)实现交换变量值
in [4]:x, y, z = z, y, x
       print(x, y, z)
Out[4]:3 2 1


2.列表list & 元组tuple
列表：可变序列，任何类型都可以放入列表，元素的类型可以不同，但一般不建议
元组：不可变序列，其中元素不可用单独修改，任何类型都可以放入列表，元素的类型可以不同，但一般不建议

(1)创建：l1 = ['a', '1', ['str'], ('str')]
        l2 = [1, 5, 3, 4, 2]
        l3 = []
        l4 = list(range(1, 5)) #转换区间对象(range)
        l4_1 = list(t2) #转换元组，也可以转换字符串、其他可迭代类型数据
        
        t1 = ('a', '1', ['str'], ('str'))
        t2 = (1, 5, 3, 4, 2)
        t2_1 = (1,) #若只有一个元素，需要加逗号，与字符串区分
        t3 = ()
        t4 = tuple(range(1, 5)) #转换区间对象(range)
        t4_1 = tuple(l2) #转换列表，也可以转换字符串、其他可迭代类型数据
        
(2)删除：
#列表
del l1, 不常用，python自带垃圾回收机制，自动回收不用的列表
del l2[1:-1:2] :删除第2个到第5个（不含5），间隔为1，输出[1, 3, 2]，删除5和4

#元组
del t1, 不常用，python自带垃圾回收机制，自动回收不用的列表
#变量
del name，也可以删除变量

(3)遍历：
for i in l1:  #元组同列表用法
or
for i,j in enumerate(l1): #带索引i，元组同列表用法
   print (i,j)
0 a
1 1
2 ['str']
3 str

(4)添加元素  #元组不可用
列表末尾添加元素：l1.append('b')，比+要快，方法参数可以是单个值、列表、元组，列表和元组作为单个元素嵌套
指定位置添加元素：l2.insert(3，'6')，效率不高，不推荐
一个列表中全部元素添加到另一个列表中：l1.extend(l2)

(5)列表修改元素： #元组可重新赋值进行修改，或用+添加元组
列表的元素相当于变量，可以通过赋值修改
a. 索引赋值：l1[1] = '2'
b. 切片赋值：
不要求新赋值的个数与切片范围相等
多则增加
In [39]:l2 = [1, 5, 3, 4, 2]
        l2[1:3]=['a', 'b', 'c']
        l2
Out[39]:[1, 'a', 'b', 'c', 4, 2]
少则删除
In [39]:l2 = [1, 5, 3, 4, 2]
        l2[1:3]=['a']
        l2
Out[39]:[1, 'a', 4, 2]
切片范围为空则插入
In [39]:l2 = [1, 5, 3, 4, 2]
        l2[1:1]=['a']
        l2
Out[39]:[1, 'a', 5, 3, 4, 2] 
切片赋值要是有列表，不能用单个值，会自动将字符串分解成序列
In [39]:l2 = [1, 5, 3, 4, 2]
        l2[1:3]='string'
        l2
Out[39]:[1, 's', 't', 'r', 'i', 'n', 'g', 4, 2]
*加上步长，要注意元素个数
In [39]:l2 = [1, 5, 3, 4, 2]
        l2[1:4:2]=['a', 'b'] #4-1+1=4/2=2，左边要赋值两个，右边也必须有两个元素，右边不能大于左边
        l2
Out[39]:[1, 'a', 3, 'b', 2]

(6)删除元素 #元组不可用
a. 根据索引删除：del l1[5]
b. 根据元素值删除：l1.remove("a")，最好先判断"a"是否存在
if l1.count("a")>0:
    l1.remove("a")
c. 清空列表：l1.clear() #输出[]

(7)列表常用方法
#栈
pop()：将列表当“栈”使用，出栈，移出列表的最后一个元素，返回被移出的元素，入栈可用append()方法代替push()，
#统计
l1.count("a")精确匹配
l1.index("a")精确匹配
sum(l2):l2各元素之和
#排序，key和reverse是关键字参数，必须通过参数名指定
#key为每个元素生成一个比较大小的键，key=l2.lower不区分大小写，key=len按字符串长度比较大小排序（用len()函数对集合元素生成比较大小的键）
#reverse是否需要反转排序
l2.sort(key=l2.lower, reverse=Flase):默认升序，先排大写字母，再排小写字母，reverse=True降序，不支持中文
sorted(l2,key=l2.lower, reverse=Flase):默认升序，先排大写字母，再排小写字母，建立副本，不改变原列表顺序


(8)列表推导式  #元组同列表用法
指定范围列表：
import random
l5 = [random.randint(10, 100) for i in range(5)]
*元组推导式生成的结果不是元组或列表，是生成器对象，需要转换成元组或列表使用
import random
t6= (random.randint(10, 100) for i in range(5))
tuple(l6) #转换输出(56, 26, 88, 97, 22)
tuple(l6) #输出()，输出或者遍历一次后，原生成器对象不存在。
指定需求列表：l6 = [x*x for x in l2]
符合条件列表：l7 = [x for x in l2 if x > 3]

(9)二维列表
每个元素都是列表，包含列表的列表
a. 直接定义：arr = [[0, 1, 2], [0, 1, 2], [0, 1, 2]]
b. for循环创建：
arr = []
for i in range(3):
    arr.append([])
    for j in range(3):
        arr[i].append(j)
c. 列表推导式创建：
arr =[[j for j in range(3)] for i in range(3)]



(11)列表与元组区别
a. 列表是可变序列，随时修改或删除，元组是不可变列表，除非重新赋值
b. 列表可用append()\insert()\extend()\remove()\pop()，元组没有这几个方法，不能添加、修改和删除
c. 列表可用切片访问和修改元素，元组只能用切片访问，不能修改
d. 列表没有元组的访问和处理速度快
e. 表不能作为字典的键，元组可用



