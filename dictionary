字典：{键：值}
(1)无序的可变序列
(2)通过键读取，键必须唯一，且不可改变，不能使用列表，可以使用数字、字符串、元组
(3)任意对象的无序集合
(4)可变，可任意嵌套
(5)相当于java的Map对象
(6)字典由dict类代表，可用dir(dict)查看该类包含哪些方法


空字典：
dic = {}
dic = dict()
dic = dict.fromkeys()

函数映射创建字典
dic = dict(zip(name, no))
zip()函数:将多个列表或元组对应位置的元素组着成元组，并返回zip对象
dict()方法:创建字典，使用元组或者列表
--------------------------
l1 = ['a', 'b']
l2 = ['1', '2']
l3 = [('a', 1), ('b', 2)]
d = dict(zip(l1,l2))
t = tuple(zip(l1,l2))
l = list(zip(l1,l2))
dic = dict(l3)  # l3 中的元组或列表只能包含2个元素
print(d)
print(t)
print(l)
print(zip(l1,l2))
dic
--------------------------
{'a': '1', 'b': '2'}
(('a', '1'), ('b', '2'))
[('a', '1'), ('b', '2')]
<zip object at 0x03CC0468>
{'a': 1, 'b': 2}
--------------------------

dict()方法:创建字典，使用关键字参数，key不允许用表达式，不用加引号
--------------------------
dic = dict(a = 1, b = 2)  
dic
--------------------------
{'a': 1, 'b': 2}
--------------------------

给定“键-值对”创建字典
--------------------------
dic = dict(a = '1', b = '2')
dic
--------------------------
{'a': '1', 'b': '2'}
--------------------------

用dict对象的fromkeys()方法，使用给定的多个key创建字典，key对应的value默认都是None,可传入默认的value
--------------------------
dic = dict.fromkeys(l1)  #创建只包括键的字典
--------------------------
{'a': None, 'b': None}
--------------------------
dic = dict.fromkeys(l1, 'apple')  #传入默认的value
--------------------------
{'a': 'apple', 'b': 'apple'}
--------------------------

用元组和列表创建字典
--------------------------
t1 = ('a', 'b')
dic = {t1:l2}
--------------------------
{('a', 'b'): ['1', '2']}  #元组可作为Key，不可变
--------------------------

用字典推导式创建字典
--------------------------
dic = {i:j+' apple' for i,j in zip(l1, l2) }
dic
--------------------------
{'a': '1 apple', 'b': '2 apple'}
--------------------------

删除字典
del dic

删除字典的全部元素
dic.clear()

访问
--------------------------
dic.get('a')
'1'
--------------------------
dic.get('c','none')  #'none'是可选项，指定键不存在时返回默认值，省略返回None
'none'
--------------------------
print(dic.get('c'))
None
--------------------------

遍历字典
items()方法，返回dict_items对象，元组列表
--------------------------
dic.items()
dict_items([('a', '1'), ('b', '2')])
--------------------------
type(dic.items())
dict_items
--------------------------

用for循环遍历元组列表，获取各个元素
--------------------------
for item in dic.items():
    print(item)
--------------------------
('a', '1')
('b', '2')
--------------------------

用for循环遍历元组列表，获取键和值
--------------------------
for key,value in dic.items():
    print(key)
    print(value)
--------------------------
a
1
b
2
--------------------------

keys()方法，返回“键”列表，dict_keys对象，一般转换成列表
--------------------------
dic.keys()
dict_keys(['a', 'b'])
--------------------------
list(dic.keys())
['a', 'b']
--------------------------

values()方法，返回“值”列表
--------------------------
dic.values()
dict_values(['1', '2'])
--------------------------

添加元素
--------------------------
dic['c'] = '3'
dic
--------------------------
{'a': '1', 'b': '2', 'c': '3'}
--------------------------
dic.update({'c': 3})
dic
--------------------------
{'a': 1, 'b': 2, 'c': 3}
--------------------------

修改元素
--------------------------
dic['c'] = '2'
dic
--------------------------
{'a': '1', 'b': '2', 'c': '2'}
--------------------------

删除元素
--------------------------
if 'c' in dic:   #判断字典是否包含指定的Key: in  or  not in， 只能基于key判断
    del dic['c']
dic
--------------------------
{'a': '1', 'b': '2'}
--------------------------
dic.pop('c')  #pop()总是弹出最后一个元素，popitem()方法随机弹出元素，但其实总是弹出底层存储的最后一个key-value对
dic
--------------------------
{'a': '1', 'b': '2'}
--------------------------

字典常用方法
--------------------------
dir(dict)
--------------------------
['__class__',
 '__contains__',
 '__delattr__',
 '__delitem__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getitem__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__iter__',
 '__le__',
 '__len__',
 '__lt__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__setitem__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 'clear',
 'copy',
 'fromkeys',
 'get',
 'items',
 'keys',
 'pop',
 'popitem',
 'setdefault',
 'update',
 'values']
--------------------------





